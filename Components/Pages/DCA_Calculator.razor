@page "/calculator"
@rendermode InteractiveServer
@using tokero_DCA_calculator.Models
@using tokero_DCA_calculator.Components.Service
<PageTitle>DCA Calculator</PageTitle>

@inject CryptoService cryptoService
@inject BinanceService binanceService

<h3>DCA Calculator</h3>

<div class="container mx-auto p-6">
    <h3 class="text-2xl font-bold mb-6 text-gray-800">DCA Calculator</h3>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Cryptocurrency Multi-Select with manual binding -->
        <div>
            <label for="cryptoSelect" class="block text-sm font-medium text-gray-700 mb-2">Select Cryptocurrencies:</label>
            <select id="cryptoSelect" multiple @onchange="OnCryptoSelectionChanged"
                    class="block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                @foreach (var crypto in cryptocurrencies)
                {
                    <option value="@crypto.Key" selected="@selectedCryptocurrencies.Contains(crypto.Key)">
                        @crypto.Key
                    </option>
                }
            </select>
        </div>

        <!-- Inputs for each selected cryptocurrency's start date and percentage -->
        @foreach (var crypto in selectedCryptocurrencies)
        {
            <div class="border rounded-lg p-4 shadow-sm bg-white mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">@crypto Start Date:</label>
                <input type="date" @bind="cryptoStartDates[crypto]"
                       class="w-full px-3 py-2 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />

                <label class="block text-sm font-medium text-gray-700 mb-2">@crypto Percentage(%):</label>
                <input type="number" @bind="cryptoPercentages[crypto]"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
        }
    </div>

    <div class="my-6">
        <label for="investAmount" class="block text-sm font-medium text-gray-700 mb-2">Total Investment Amount (EUR):</label>
        <input type="number" id="investAmount" @bind="totalInvestedAmount"
               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
    </div>

    <button @onclick="GenerateInvestmentEntriesHeaders"
            class="bg-gray-900 text-black px-4 py-2 rounded-md shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
        Add Investments
    </button>
    <button @onclick="ClearCryptoEntries"
            class="bg-gray-900 text-black px-4 py-2 rounded-md shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
        Clear Headers
    </button>

    <!-- Display Investment Entries -->
    <div class="mt-8">
        <h4 class="text-xl font-semibold text-gray-800 mb-4">Investment Entries</h4>
        @foreach (var entry in investmentEntriesHeaders)
        {
            <div class="p-4 border border-gray-200 rounded-lg bg-white shadow-sm mb-4">
                <label class="font-semibold text-gray-600">Cryptocurrency:</label> @entry.Cryptocurrency <br />
                <label class="font-semibold text-gray-600">Start Date:</label> @entry.StartDate.ToString("yyyy-MM-dd") <br />
                <label class="font-semibold text-gray-600">Invested Amount:</label> @entry.InvestedAmount <br />
                <label class="font-semibold text-gray-600">Percentage:</label> @entry.PercentageInvestedAmount
            </div>
        }
    </div>

    <!-- Investment Table -->
    <table class="table-auto w-full mt-8 border-collapse">
        <thead class="bg-gray-100 text-gray-700">
            <tr>
                <th class="px-4 py-2 border">Date</th>
                <th class="px-4 py-2 border">Cryptocurrency</th>
                <th class="px-4 py-2 border">Invested Amount</th>
                <th class="px-4 py-2 border">Cryptocurrency Amount</th>
                <th class="px-4 py-2 border">Value At Date</th>
                <th class="px-4 py-2 border">ROI</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in investmentEntriesForMonths)
            {
                <tr class="border-b">
                    <td class="px-4 py-2">@entry.StartDate.ToString("MM/yyyy")</td>
                    <td class="px-4 py-2">@entry.Cryptocurrency</td>
                    <td class="px-4 py-2">@entry.InvestedAmount</td>
                    <td class="px-4 py-2">@entry.CryptoAmount</td>
                    <td class="px-4 py-2">@entry.valueAtDate</td>
                    <td class="px-4 py-2">@entry.ROI.ToString("F4")%</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private decimal totalInvestedAmount;

    private List<string> selectedCryptocurrencies = new List<string>();
    private List<InvestmentEntryHeader> investmentEntriesHeaders = new List<InvestmentEntryHeader>();
    private List<InvestmentEntryMonths> investmentEntriesForMonths = new List<InvestmentEntryMonths>();
    private List<PriceEntry> priceEntries = new List<PriceEntry>();

    private Dictionary<string, DateTime> cryptoStartDates = new Dictionary<string, DateTime>();
    private Dictionary<string, decimal> cryptoPercentages = new Dictionary<string, decimal>();
    private Dictionary<string, string> cryptocurrencies = new Dictionary<string, string>
    {
        { "Bitcoin", "BTCUSDT" },
        { "Ethereum", "ETHUSDT" },
        { "Solana", "SOLUSDT" },
        { "Cardano", "ADAUSDT" }
    };

    //On page load
    protected override async Task OnInitializedAsync()
    {
        GetInvestmentEntriesForMonthDB();
    }

    //Get already saved data from db 
    private async void GetInvestmentEntriesForMonthDB()
    {
        investmentEntriesForMonths = await cryptoService.GetInvestmentEntriesForMonthsAsync();
        investmentEntriesForMonths = investmentEntriesForMonths.OrderBy(el => el.Cryptocurrency).ToList();
    }
   

    //Generate new entries for currencies
    private async void GenerateInvestmentEntriesForMonths()
    {
        List<InvestmentEntryMonths> investmentEntriesForMonthsAux = new List<InvestmentEntryMonths>();
        foreach (var entry in investmentEntriesHeaders)
        {
            var startDate = entry.StartDate;
            var currentDate = DateTime.Now;
            var monthsDifference = ((currentDate.Year - startDate.Year) * 12) + currentDate.Month - startDate.Month;

            for (int monthOffset = 0; monthOffset <= monthsDifference; monthOffset++)
            {
                var monthDate = startDate.AddMonths(monthOffset);

                var currentPriceEntry = priceEntries.Find(el => el.CryptoCurrencyName.Equals(entry.Cryptocurrency) && el.Date.Equals(monthDate));
                if (currentPriceEntry == null) { continue; }

                decimal currentPrice = currentPriceEntry.Price;
                decimal cryptoAmount = currentPrice != 0 ? entry.InvestedAmount / currentPrice : 0;

                decimal ROI = 0;
                var nextMonth = monthDate.AddMonths(1);
                var nextPriceEntry = priceEntries.Find(el => el.Date.Equals(nextMonth) && el.CryptoCurrencyName.Equals(entry.Cryptocurrency));

                if (nextPriceEntry != null)
                {
                    ROI = CalculateROI(nextPriceEntry, entry, currentPrice);
                }

                investmentEntriesForMonthsAux.Add(new InvestmentEntryMonths
                {
                        StartDate = monthDate,
                        Cryptocurrency = entry.Cryptocurrency,
                        InvestedAmount = entry.InvestedAmount,
                        CryptoAmount = cryptoAmount,
                        valueAtDate = currentPrice, 
                        ROI = ROI,
                        PercentageInvestedAmount = entry.PercentageInvestedAmount,
                });
            }
        }

        investmentEntriesForMonthsAux = investmentEntriesForMonthsAux.OrderBy(el => el.Cryptocurrency).ToList();
        await cryptoService.SaveInvestmentEntriesForMonthsAsync(investmentEntriesForMonthsAux);

        investmentEntriesForMonths.AddRange(investmentEntriesForMonthsAux);
        investmentEntriesForMonths = investmentEntriesForMonths.OrderBy(el => el.Cryptocurrency).ToList(); 
        StateHasChanged();
    }
    private async void GenerateInvestmentEntriesHeaders()
    {
        foreach (var crypto in selectedCryptocurrencies)
        {
            if (cryptoStartDates.ContainsKey(crypto) && cryptoPercentages.ContainsKey(crypto))
            {
                var startDate = cryptoStartDates[crypto];
                var investedAmount = (cryptoPercentages[crypto] / 100) * totalInvestedAmount;
                var monthsDifference = ((DateTime.Now.Year - startDate.Year) * 12) + DateTime.Now.Month - startDate.Month;

                for (int monthOffset = 0; monthOffset <= monthsDifference; monthOffset++)
                {
                    var dateToFetchPrice = startDate.AddMonths(monthOffset);
                    var price = await binanceService.GetCryptoPriceAsync(cryptocurrencies[crypto], dateToFetchPrice);
                    priceEntries.Add(new PriceEntry
                        {
                            CryptoCurrencyName = crypto,
                            Date = dateToFetchPrice,
                            Price = price
                        });
                }

                investmentEntriesHeaders.Add(new InvestmentEntryHeader
                {
                    Cryptocurrency = crypto,
                    StartDate = startDate,
                    InvestedAmount = investedAmount,
                    PercentageInvestedAmount = cryptoPercentages[crypto]
                });
            }
        }
        GenerateInvestmentEntriesForMonths();
        StateHasChanged();
    }
    
    //Utils for calculations
    private void ClearCryptoEntries()
    {
        selectedCryptocurrencies = [];
    }
    private void OnCryptoSelectionChanged(ChangeEventArgs e)
    {
        var selectedOptions = ((IEnumerable<string>)e.Value).ToList();
        selectedCryptocurrencies.Clear();
        selectedCryptocurrencies.AddRange(selectedOptions);

        foreach (var crypto in selectedCryptocurrencies)
        {
            if (!cryptoStartDates.ContainsKey(crypto))
            {
                cryptoStartDates[crypto] = DateTime.Now;
            }

            if (!cryptoPercentages.ContainsKey(crypto))
            {
                cryptoPercentages[crypto] = 0;
            }
        }
    }
    private decimal CalculateROI(PriceEntry nextPriceEntry, InvestmentEntryHeader entry, decimal currentPrice)
    {
        decimal ROI = 0;
        if (nextPriceEntry != null)
        {
            decimal currPurchasedMonth1 = entry.InvestedAmount / currentPrice;
            decimal currPurchasedMonth2 = nextPriceEntry.Price != 0 ? entry.InvestedAmount / nextPriceEntry.Price : 0;
            decimal totalCurrency2Months = currPurchasedMonth1 + currPurchasedMonth2;
            decimal totalValueForROI = totalCurrency2Months * nextPriceEntry.Price;

            if (entry.InvestedAmount != 0 && entry.PercentageInvestedAmount != 0)
            {
                ROI = (totalValueForROI - (2 * entry.InvestedAmount)) / (2 * entry.InvestedAmount) * 100;
            }
        }
        return ROI;
    }

}